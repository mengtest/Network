/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 1 */
/* metalib md5sum: 18051f1fb33a7826c90582ba0ba88dc1 */

/* creation time: Fri May 09 16:26:43 2014 */
/* tdr version: 2.6.7, build at 20131230 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;
using ProtoBuf;
using CS;
using protocol;

namespace net
{
    /*public class DGPkgHead
    {
        public UInt16 Version { get; set; }
        public UInt16 CmdID { get; set; }
        public UInt16 Length { get; set; }
        public UInt16 MsgSeqID { get; set; }

        
        public DGPkgHead()
        {

        }
    }*/



public class DGPKG
{
    private uint m_totalLength;
    private uint m_headerLength;

    private Header m_header;
    private object m_body;

    public uint totalLength { get { return m_totalLength; } set { m_totalLength = value; } }
    public uint headerLength { get { return m_headerLength; } set { m_headerLength = value; } }
    public Header header { get { return m_header; } set { m_header = value; } }
    public object body { get { return m_body; } set { m_body = value; } }

		public static System.Reflection.Assembly m_assembly = new ShardLoginReq().GetType().Assembly;
    public DGPKG()
    {
        m_totalLength = 0;
        m_headerLength = 0;
        m_header = null;
        m_body = null;
    }
	#if true
    public DGPKG doDeserialize(byte[] data)
    {
		if(m_assembly == null)
			return null;
        System.IO.MemoryStream stream = new System.IO.MemoryStream(data, 0, sizeof(uint) * 2);
        System.IO.BinaryReader binaryReader = new System.IO.BinaryReader(stream);
        m_totalLength = binaryReader.ReadUInt32();
        m_headerLength = binaryReader.ReadUInt32();

        int offset = sizeof(uint) * 2;
        System.IO.MemoryStream streamHeader = new System.IO.MemoryStream(data, offset, (int)m_headerLength);
        ProtoRW rw = new ProtoRW();
        m_header = rw.Deserialize(streamHeader, null, typeof (Header)) as Header;//ProtoBuf.Serializer.Deserialize<Header>(streamHeader);
        offset += (int)m_headerLength;

        System.IO.MemoryStream streamBody = new System.IO.MemoryStream(data, offset, (int)m_totalLength - offset);
        string msg_full_name = m_header.msg_full_name;
        //UnityEngine.Debug.LogError(msg_full_name);
        //UnityEngine.Debug.LogError(m_assembly.GetType(m_header.msg_full_name));
        //UnityEngine.Debug.LogError(new CS.ShardLoginRsp().GetType());
        //UnityEngine.Debug.LogError(typeof(CS.ShardLoginRsp));
        m_body = rw.Deserialize(streamBody,null,m_assembly.GetType(m_header.msg_full_name));//ProtoBuf.Meta.RuntimeTypeModel.Default.Deserialize(streamBody, null, Type.GetType(m_header.msg_full_name));
        //wl_res.AIConfig aiconfig = new wl_res.AIConfig();
        return this;
    }

    public byte[] doSerialize()
    {
		if(m_assembly == null)
			return null;
        m_header.msg_full_name = m_body.ToString();
        System.IO.MemoryStream stream = new System.IO.MemoryStream();
        stream.Position = sizeof(uint) * 2;
        ProtoRW rw = new ProtoRW();
        //ProtoBuf.Serializer.Serialize(stream, m_header);
        rw.Serialize(stream,m_header);

        m_headerLength = (uint)(stream.Length - sizeof(uint) * 2);
        //ProtoBuf.Serializer.Serialize(stream, m_body);
        rw.Serialize(stream,m_body);
        System.IO.BinaryWriter binaryWriter = new System.IO.BinaryWriter(stream);
        stream.Position = 0;
        m_totalLength = (uint)stream.Length;
        binaryWriter.Write(m_totalLength);
        binaryWriter.Write(m_headerLength);
        binaryWriter.Flush();
        return stream.ToArray();
    }
	#else
    public DGPKG doDeserialize(byte[] data)
    {
		if(m_assembly == null)
			return null;
        System.IO.MemoryStream stream = new System.IO.MemoryStream(data, 0, sizeof(uint) * 2);
        System.IO.BinaryReader binaryReader = new System.IO.BinaryReader(stream);
        m_totalLength = binaryReader.ReadUInt32();
        m_headerLength = binaryReader.ReadUInt32();

        int offset = sizeof(uint) * 2;
        System.IO.MemoryStream streamHeader = new System.IO.MemoryStream(data, offset, (int)m_headerLength);
        m_header = ProtoBuf.Serializer.Deserialize<Header>(streamHeader);
        offset += (int)m_headerLength;
		
        System.IO.MemoryStream streamBody = new System.IO.MemoryStream(data, offset, (int)m_totalLength - offset);
        m_body = ProtoBuf.Meta.RuntimeTypeModel.Default.Deserialize(streamBody, null, m_assembly.GetType(m_header.msg_full_name));
        return this;
    }

    public byte[] doSerialize()
    {
        m_header.msg_full_name = m_body.ToString();
        System.IO.MemoryStream stream = new System.IO.MemoryStream();
        stream.Position = sizeof(uint) * 2;
        ProtoBuf.Serializer.Serialize(stream, m_header);

        m_headerLength = (uint)(stream.Length - sizeof(uint) * 2);
        ProtoBuf.Serializer.Serialize(stream, m_body);
        System.IO.BinaryWriter binaryWriter = new System.IO.BinaryWriter(stream);
        stream.Position = 0;
        m_totalLength = (uint)stream.Length;
        binaryWriter.Write(m_totalLength);
        binaryWriter.Write(m_headerLength);
        binaryWriter.Flush();
        return stream.ToArray();
    }
	#endif
}
}
